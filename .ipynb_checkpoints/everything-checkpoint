{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import spacy\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "import praw\n",
    "from praw.models import MoreComments\n",
    "\n",
    "#client_id: jhAffV3EzTf80A\n",
    "#secret: f38Y5S9QTzm6y0LyG5UiU47sMKk\n",
    "#username: carameldeligh5\n",
    "#password: @Collingsworth5\n",
    "\n",
    "#scrapes google for top 10 links \n",
    "\n",
    "query = \"best places to eat in seattle reddit\"\n",
    "substring = \"comments/\"\n",
    "\n",
    "#FUNCTIONS \n",
    "\n",
    "#returns a list of post IDs \n",
    "def get_postIDs(query): \n",
    "    \n",
    "    page = requests.get(\"https://www.google.com/search?q=\" + term)\n",
    "    soup = BeautifulSoup(page.content, \"lxml\")\n",
    "    urls = soup.select(\".r a\")\n",
    "    links = [\"https://www.google.com\" + url.get('href') for url in urls]\n",
    "    \n",
    "    #could be extra processing here (LOOK DOWN)\n",
    "    links = links[1:]\n",
    "    \n",
    "    submissions = []\n",
    "    for link in links:\n",
    "        begIndex = link.index(substring) + 9\n",
    "        endIndex = begIndex + 6\n",
    "        submissions.append(link[begIndex : endIndex])\n",
    "    \n",
    "    return submissions\n",
    "        \n",
    "\n",
    "postIDs = get_postIDs(query)\n",
    "\n",
    "client_id = \"jhAffV3EzTf80A\"\n",
    "client_secret = \"f38Y5S9QTzm6y0LyG5UiU47sMKk\"\n",
    "username = \"carameldelight5\"\n",
    "password = \"@Collingsworth5\"\n",
    "\n",
    "reddit = praw.Reddit(client_id=client_id,\n",
    "                     client_secret=client_secret,\n",
    "                     password=password,\n",
    "                     user_agent='testscript by /u/carameldelight5',\n",
    "                     username=username)\n",
    "                     \n",
    "\n",
    "\n",
    "# TODO: uncomment - iterates through 10 reddit posts & gets top level comments for each post\n",
    "\n",
    "# postCount = 0 \n",
    "\n",
    "# for postID in postIDs: \n",
    "    \n",
    "#     print (\"POST: \" + str(postCount))\n",
    "#     post = reddit.submission(id = postID)\n",
    "#     commentCount = 0\n",
    "\n",
    "#     for top_level_comment in post.comments:\n",
    "#         if isinstance(top_level_comment, MoreComments):\n",
    "#             continue\n",
    "#         print (\"    COMMENT : \" + str(commentCount) + \" SCORE: \" + top_level_comment.)\n",
    "#         print(\"    \" + top_level_comment.body)\n",
    "        \n",
    "#         commentCount += 1\n",
    "\n",
    "#     postCount += 1\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    }
   ],
   "source": [
    "#nlp test \n",
    "testPost = reddit.submission(id = postIDs[0])\n",
    "testComment = testPost.comments[1]\n",
    "print (testComment.score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "object of type 'Comment' has no len()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-19-dc26bcc468ce>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnlp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"en\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtestCommentEnt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnlp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtestComment\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ment\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtestCommentEnts\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ment\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\" \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/spacy/language.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, text, disable)\u001b[0m\n\u001b[1;32m    341\u001b[0m             \u001b[0;34m(\u001b[0m\u001b[0;34m'An'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NN'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    342\u001b[0m         \"\"\"\n\u001b[0;32m--> 343\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_length\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    344\u001b[0m             raise ValueError(Errors.E088.format(length=len(text),\n\u001b[1;32m    345\u001b[0m                                                 max_length=self.max_length))\n",
      "\u001b[0;31mTypeError\u001b[0m: object of type 'Comment' has no len()"
     ]
    }
   ],
   "source": [
    "nlp = spacy.load(\"en\")\n",
    "testCommentEnt = nlp(testComment.body)\n",
    "\n",
    "for ent in testCommentEnts.ents: \n",
    "    print(ent, end = \" \")\n",
    "    print(ent.label_, end = \" \")\n",
    "    print(ent.label, end = \" \")\n",
    "    print(\"\\n\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
